// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import MapKit;
@import Foundation;
@import UIKit;
@import WatchKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIImage;
@class NSError;

@interface MKAnnotationView (SWIFT_EXTENSION(KFSwiftImageLoader))
/// Asynchronously downloads an image and loads it into the <code>MKAnnotationView</code> using a URL <code>String</code>.
/// \param urlString The image URL in the form of a <code>String</code>.
///
/// \param placeholderImage <code>UIImage?</code> representing a placeholder image that is loaded into the view while the asynchronous download takes place. The default value is <code>nil</code>.
///
/// \param completion An optional closure that is called to indicate completion of the intended purpose of this method. It returns two values: the first is a <code>Bool</code> indicating whether everything was successful, and the second is <code>NSError?</code> which will be non-nil should an error occur. The default value is <code>nil</code>.
///
- (void)loadImageWithUrlString:(NSString * _Nonnull)urlString placeholderImage:(UIImage * _Nullable)placeholderImage completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Asynchronously downloads an image and loads it into the <code>MKAnnotationView</code> using a <code>URL</code>.
/// \param url The image <code>URL</code>.
///
/// \param placeholderImage <code>UIImage?</code> representing a placeholder image that is loaded into the view while the asynchronous download takes place. The default value is <code>nil</code>.
///
/// \param completion An optional closure that is called to indicate completion of the intended purpose of this method. It returns two values: the first is a <code>Bool</code> indicating whether everything was successful, and the second is <code>NSError?</code> which will be non-nil should an error occur. The default value is <code>nil</code>.
///
- (void)loadImageWithUrl:(NSURL * _Nonnull)url placeholderImage:(UIImage * _Nullable)placeholderImage completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Asynchronously downloads an image and loads it into the <code>MKAnnotationView</code> using a <code>URLRequest</code>.
/// \param request The image URL in the form of a <code>URLRequest</code>.
///
/// \param placeholderImage <code>UIImage?</code> representing a placeholder image that is loaded into the view while the asynchronous download takes place. The default value is <code>nil</code>.
///
/// \param completion An optional closure that is called to indicate completion of the intended purpose of this method. It returns two values: the first is a <code>Bool</code> indicating whether everything was successful, and the second is <code>NSError?</code> which will be non-nil should an error occur. The default value is <code>nil</code>.
///
- (void)loadImageWithRequest:(NSURLRequest * _Nonnull)request placeholderImage:(UIImage * _Nullable)placeholderImage completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
@end


@interface UIButton (SWIFT_EXTENSION(KFSwiftImageLoader))
/// Asynchronously downloads an image and loads it into the <code>UIButton</code> using a URL <code>String</code>.
/// \param urlString The image URL in the form of a <code>String</code>.
///
/// \param placeholderImage <code>UIImage?</code> representing a placeholder image that is loaded into the view while the asynchronous download takes place. The default value is <code>nil</code>.
///
/// \param controlState <code>UIControlState</code> to be used when loading the image. The default value is <code>normal</code>.
///
/// \param isBackgroundImage <code>Bool</code> indicating whether or not the image is intended for the buttonâ€™s background. The default value is <code>false</code>.
///
/// \param completion An optional closure that is called to indicate completion of the intended purpose of this method. It returns two values: the first is a <code>Bool</code> indicating whether everything was successful, and the second is <code>NSError?</code> which will be non-nil should an error occur. The default value is <code>nil</code>.
///
- (void)loadImageWithUrlString:(NSString * _Nonnull)urlString placeholderImage:(UIImage * _Nullable)placeholderImage controlState:(UIControlState)controlState isBackgroundImage:(BOOL)isBackgroundImage completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Asynchronously downloads an image and loads it into the <code>UIButton</code> using a <code>URL</code>.
/// \param url The image <code>URL</code>.
///
/// \param placeholderImage <code>UIImage?</code> representing a placeholder image that is loaded into the view while the asynchronous download takes place. The default value is <code>nil</code>.
///
/// \param controlState <code>UIControlState</code> to be used when loading the image. The default value is <code>normal</code>.
///
/// \param isBackgroundImage <code>Bool</code> indicating whether or not the image is intended for the buttonâ€™s background. The default value is <code>false</code>.
///
/// \param completion An optional closure that is called to indicate completion of the intended purpose of this method. It returns two values: the first is a <code>Bool</code> indicating whether everything was successful, and the second is <code>NSError?</code> which will be non-nil should an error occur. The default value is <code>nil</code>.
///
- (void)loadImageWithUrl:(NSURL * _Nonnull)url placeholderImage:(UIImage * _Nullable)placeholderImage controlState:(UIControlState)controlState isBackgroundImage:(BOOL)isBackgroundImage completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Asynchronously downloads an image and loads it into the <code>UIButton</code> using a <code>URLRequest</code>.
/// \param request The image URL in the form of a <code>URLRequest</code>.
///
/// \param placeholderImage <code>UIImage?</code> representing a placeholder image that is loaded into the view while the asynchronous download takes place. The default value is <code>nil</code>.
///
/// \param controlState <code>UIControlState</code> to be used when loading the image. The default value is <code>normal</code>.
///
/// \param isBackgroundImage <code>Bool</code> indicating whether or not the image is intended for the buttonâ€™s background. The default value is <code>false</code>.
///
/// \param completion An optional closure that is called to indicate completion of the intended purpose of this method. It returns two values: the first is a <code>Bool</code> indicating whether everything was successful, and the second is <code>NSError?</code> which will be non-nil should an error occur. The default value is <code>nil</code>.
///
- (void)loadImageWithRequest:(NSURLRequest * _Nonnull)request placeholderImage:(UIImage * _Nullable)placeholderImage controlState:(UIControlState)controlState isBackgroundImage:(BOOL)isBackgroundImage completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
@end


@interface UIImageView (SWIFT_EXTENSION(KFSwiftImageLoader))
/// Asynchronously downloads an image and loads it into the <code>UIImageView</code> using a URL <code>String</code>.
/// \param urlString The image URL in the form of a <code>String</code>.
///
/// \param placeholderImage <code>UIImage?</code> representing a placeholder image that is loaded into the view while the asynchronous download takes place. The default value is <code>nil</code>.
///
/// \param completion An optional closure that is called to indicate completion of the intended purpose of this method. It returns two values: the first is a <code>Bool</code> indicating whether everything was successful, and the second is <code>NSError?</code> which will be non-nil should an error occur. The default value is <code>nil</code>.
///
- (void)loadImageWithUrlString:(NSString * _Nonnull)urlString placeholderImage:(UIImage * _Nullable)placeholderImage completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Asynchronously downloads an image and loads it into the <code>UIImageView</code> using a <code>URL</code>.
/// \param url The image <code>URL</code>.
///
/// \param placeholderImage <code>UIImage?</code> representing a placeholder image that is loaded into the view while the asynchronous download takes place. The default value is <code>nil</code>.
///
/// \param completion An optional closure that is called to indicate completion of the intended purpose of this method. It returns two values: the first is a <code>Bool</code> indicating whether everything was successful, and the second is <code>NSError?</code> which will be non-nil should an error occur. The default value is <code>nil</code>.
///
- (void)loadImageWithUrl:(NSURL * _Nonnull)url placeholderImage:(UIImage * _Nullable)placeholderImage completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Asynchronously downloads an image and loads it into the <code>UIImageView</code> using a <code>URLRequest</code>.
/// \param request The image URL in the form of a <code>URLRequest</code>.
///
/// \param placeholderImage <code>UIImage?</code> representing a placeholder image that is loaded into the view while the asynchronous download takes place. The default value is <code>nil</code>.
///
/// \param completion An optional closure that is called to indicate completion of the intended purpose of this method. It returns two values: the first is a <code>Bool</code> indicating whether everything was successful, and the second is <code>NSError?</code> which will be non-nil should an error occur. The default value is <code>nil</code>.
///
- (void)loadImageWithRequest:(NSURLRequest * _Nonnull)request placeholderImage:(UIImage * _Nullable)placeholderImage completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
@end


@interface WKInterfaceImage (SWIFT_EXTENSION(KFSwiftImageLoader))
/// Asynchronously downloads an image and loads it into the <code>WKInterfaceImage</code> using a URL <code>String</code>.
/// \param urlString The image URL in the form of a <code>String</code>.
///
/// \param placeholderImageName <code>String?</code> representing the name of a placeholder image that is loaded into the <code>WKInterfaceImage</code> while the asynchronous download takes place. The default value is <code>nil</code>.
///
/// \param shouldUseDeviceCache <code>Bool</code> indicating whether or not to use the ï£¿ Watchâ€™s device cache for dramatically improved performance. This should only be considered for images that are likely to be loaded more than once throughout the lifetime of the app. The default value is <code>false</code>.
///
/// \param completion An optional closure that is called to indicate completion of the intended purpose of this method. It returns two values: the first is a <code>Bool</code> indicating whether everything was successful, and the second is <code>NSError?</code> which will be non-nil should an error occur. The default value is <code>nil</code>.
///
- (void)loadImageWithUrlString:(NSString * _Nonnull)urlString placeholderImageName:(NSString * _Nullable)placeholderImageName shouldUseDeviceCache:(BOOL)shouldUseDeviceCache completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Asynchronously downloads an image and loads it into the <code>WKInterfaceImage</code> using a <code>URL</code>.
/// \param url The image <code>URL</code>.
///
/// \param placeholderImageName <code>String?</code> representing the name of a placeholder image that is loaded into the <code>WKInterfaceImage</code> while the asynchronous download takes place. The default value is <code>nil</code>.
///
/// \param shouldUseDeviceCache <code>Bool</code> indicating whether or not to use the ï£¿ Watchâ€™s device cache for dramatically improved performance. This should only be considered for images that are likely to be loaded more than once throughout the lifetime of the app. The default value is <code>false</code>.
///
/// \param completion An optional closure that is called to indicate completion of the intended purpose of this method. It returns two values: the first is a <code>Bool</code> indicating whether everything was successful, and the second is <code>NSError?</code> which will be non-nil should an error occur. The default value is <code>nil</code>.
///
- (void)loadImageWithUrl:(NSURL * _Nonnull)url placeholderImageName:(NSString * _Nullable)placeholderImageName shouldUseDeviceCache:(BOOL)shouldUseDeviceCache completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Asynchronously downloads an image and loads it into the <code>WKInterfaceImage</code> using a <code>URLRequest</code>.
/// \param request The image URL in the form of a <code>URLRequest</code>.
///
/// \param placeholderImageName <code>String?</code> representing the name of a placeholder image that is loaded into the <code>WKInterfaceImage</code> while the asynchronous download takes place. The default value is <code>nil</code>.
///
/// \param shouldUseDeviceCache <code>Bool</code> indicating whether or not to use the ï£¿ Watchâ€™s device cache for dramatically improved performance. This should only be considered for images that are likely to be loaded more than once throughout the lifetime of the app. The default value is <code>false</code>.
///
/// \param completion An optional closure that is called to indicate completion of the intended purpose of this method. It returns two values: the first is a <code>Bool</code> indicating whether everything was successful, and the second is <code>NSError?</code> which will be non-nil should an error occur. The default value is <code>nil</code>.
///
- (void)loadImageWithRequest:(NSURLRequest * _Nonnull)request placeholderImageName:(NSString * _Nullable)placeholderImageName shouldUseDeviceCache:(BOOL)shouldUseDeviceCache completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
@end

#pragma clang diagnostic pop
